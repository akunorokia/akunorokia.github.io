<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Akunorokia</title>
    <link>https://akunorokia.github.io/categories/golang/</link>
    <description>Recent content in Golang on Akunorokia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Mar 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://akunorokia.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>unsafe包初涉小记</title>
      <link>https://akunorokia.github.io/2019/2019-03-15-unsafe%E5%8C%85%E5%88%9D%E6%B6%89%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://akunorokia.github.io/2019/2019-03-15-unsafe%E5%8C%85%E5%88%9D%E6%B6%89%E5%B0%8F%E8%AE%B0/</guid>
      <description>示例code:  var Astruct struct { a int b string } Astruct.a = 1 Astruct.b = &amp;quot;1&amp;quot; s := &amp;amp;Astruct b := (*string)(unsafe.Pointer(uintptr(unsafe.Pointer(s)) + uintptr(unsafe.Sizeof(int(0))))) *b = &amp;quot;000&amp;quot; fmt.printf(&amp;quot;aa:%v\r\n&amp;quot;, Astruct)   个人初见：  利用unsafe包可以通过内存中的公有变量定位到内存地址，进而对定位推算到的公/私有变量值进行取值和赋值。
像不像外挂?</description>
    </item>
    
  </channel>
</rss>